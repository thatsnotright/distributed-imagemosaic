/************************************************
 *  libForm.java
 *  Author: Jim Drewes, 2002
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *
 * This is the image library mainainance form.
 * Its mostly just a GUI class.
 ************************************************/

import java.io.*;
import plugins.*;
import imageUtils.imageInfo;
import javax.swing.JFileChooser;

public class libForm extends javax.swing.JFrame {
     
    /** Creates new form libForm */
    public libForm() {
        initComponents();
        initForm();
    }


private void initForm() {
    imageFileList = new imageUtils.imageList();  // the list of images.
    updateBanner();             // Update the title bar on the window.
    timer.stop();               // Make sure the timer isn't running.
}

// Forte Generated Code.
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
private void initComponents() {//GEN-BEGIN:initComponents
jMenuBar1 = new javax.swing.JMenuBar();
FileMenu = new javax.swing.JMenu();
saveButton = new javax.swing.JMenuItem();
saveAsButton = new javax.swing.JMenuItem();
openButton = new javax.swing.JMenuItem();
jSeparator2 = new javax.swing.JSeparator();
commitButton = new javax.swing.JMenuItem();
openDatabaseButton = new javax.swing.JMenuItem();
jSeparator3 = new javax.swing.JSeparator();
uploadButton = new javax.swing.JMenuItem();
downloadButton = new javax.swing.JMenuItem();
jSeparator4 = new javax.swing.JSeparator();
exitButton = new javax.swing.JMenuItem();
EvaluateMenu = new javax.swing.JMenu();
EvaluateMenuItem = new javax.swing.JMenuItem();
EvaluateNewItem = new javax.swing.JMenuItem();
EvaluateChangedItem = new javax.swing.JMenuItem();
timer = new org.netbeans.examples.lib.timerbean.Timer();
timer.stop();
evaluationProgressBar = new javax.swing.JProgressBar();
algorithmBox = new javax.swing.JComboBox();
pauseButton = new javax.swing.JButton();
jPanel1 = new javax.swing.JPanel();
libFileList = new java.awt.List();
availFileList = new javax.swing.JFileChooser();
addOneFileButton = new javax.swing.JButton();
removeOneFileButton = new javax.swing.JButton();
removeAllFilesButton = new javax.swing.JButton();
jPanel2 = new javax.swing.JPanel();
cancelButton = new javax.swing.JButton();
jLabel1 = new javax.swing.JLabel();
algOptionsButton = new javax.swing.JButton();

FileMenu.setText("File");
saveButton.setText("Save");
saveButton.setEnabled(false);
saveButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
saveButtonActionPerformed(evt);
}
});

FileMenu.add(saveButton);
saveAsButton.setText("Save As");
saveAsButton.setEnabled(false);
FileMenu.add(saveAsButton);
openButton.setText("Open");
openButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
openButtonActionPerformed(evt);
}
});

FileMenu.add(openButton);
FileMenu.add(jSeparator2);
commitButton.setText("Commit To Database");
commitButton.setEnabled(false);
FileMenu.add(commitButton);
openDatabaseButton.setText("Open Database");
openDatabaseButton.setEnabled(false);
FileMenu.add(openDatabaseButton);
FileMenu.add(jSeparator3);
uploadButton.setText("Upload");
uploadButton.setEnabled(false);
uploadButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
uploadButtonActionPerformed(evt);
}
});

FileMenu.add(uploadButton);
downloadButton.setText("Download");
downloadButton.setEnabled(false);
FileMenu.add(downloadButton);
FileMenu.add(jSeparator4);
exitButton.setText("Exit");
exitButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
exitButtonActionPerformed(evt);
}
});

FileMenu.add(exitButton);
jMenuBar1.add(FileMenu);
EvaluateMenu.setText("Evaluate");
EvaluateMenuItem.setText("Evaluate Images");
EvaluateMenuItem.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
EvaluateMenuItemActionPerformed(evt);
}
});

EvaluateMenu.add(EvaluateMenuItem);
EvaluateNewItem.setText("Evaluate New Images Only");
EvaluateNewItem.setEnabled(false);
EvaluateNewItem.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
EvaluateNewItemActionPerformed(evt);
}
});

EvaluateMenu.add(EvaluateNewItem);
EvaluateChangedItem.setText("Evaluate Changed Images");
EvaluateChangedItem.setEnabled(false);
EvaluateChangedItem.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
EvaluateChangedItemActionPerformed(evt);
}
});

EvaluateMenu.add(EvaluateChangedItem);
jMenuBar1.add(EvaluateMenu);
timer.setDelay(10L);
timer.addTimerListener(new org.netbeans.examples.lib.timerbean.TimerListener() {
public void onTime(java.awt.event.ActionEvent evt) {
timerOnTime(evt);
}
});


getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

setTitle("Image Library [Untitled]");
addWindowListener(new java.awt.event.WindowAdapter() {
public void windowClosing(java.awt.event.WindowEvent evt) {
exitForm(evt);
}
});

getContentPane().add(evaluationProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 640, 550, 20));

algorithmBox.setEnabled(false);
getContentPane().add(algorithmBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 610, 230, -1));

pauseButton.setText("Pause");
pauseButton.setEnabled(false);
pauseButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
pauseButtonActionPerformed(evt);
}
});

getContentPane().add(pauseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 640, 80, 20));

jPanel1.setLayout(null);

jPanel1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "File Selection"));
libFileList.setBackground(java.awt.Color.white);
libFileList.setFont(new java.awt.Font ("Lucida Sans", 0, 10));
libFileList.setMultipleMode(true);
jPanel1.add(libFileList);
libFileList.setBounds(420, 60, 280, 510);

availFileList.setControlButtonsAreShown(false);
availFileList.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
availFileList.setFileFilter(new myImageFilter());
availFileList.setMultiSelectionEnabled(true);
jPanel1.add(availFileList);
availFileList.setBounds(10, 10, 350, 570);

addOneFileButton.setText(">");
addOneFileButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
addOneFileButtonActionPerformed(evt);
}
});

jPanel1.add(addOneFileButton);
addOneFileButton.setBounds(360, 250, 50, 27);

removeOneFileButton.setText("<");
removeOneFileButton.setMargin(new java.awt.Insets(2, 7, 2, 7));
removeOneFileButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
removeOneFileButtonActionPerformed(evt);
}
});

jPanel1.add(removeOneFileButton);
removeOneFileButton.setBounds(360, 290, 50, 27);

removeAllFilesButton.setText("Clear List");
removeAllFilesButton.setMargin(new java.awt.Insets(2, 7, 2, 7));
removeAllFilesButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
removeAllFilesButtonActionPerformed(evt);
}
});

jPanel1.add(removeAllFilesButton);
removeAllFilesButton.setBounds(420, 37, 90, 20);

jPanel1.add(jPanel2);
jPanel2.setBounds(650, 190, 10, 10);

getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 720, 590));

cancelButton.setText("Cancel");
cancelButton.setEnabled(false);
cancelButton.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
cancelButtonActionPerformed(evt);
}
});

getContentPane().add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 640, 80, 20));

jLabel1.setText("Evaluation Algorithm:");
getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 140, -1));

algOptionsButton.setText("Options");
algOptionsButton.setEnabled(false);
getContentPane().add(algOptionsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 610, -1, -1));

setJMenuBar(jMenuBar1);
pack();
}//GEN-END:initComponents

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    currentEval.stop();
    evaluationProgressBar.setValue(0);
    evaluationProgressBar.setString("Evaluation Stopped!");
    timer.stop();
    cancelButton.setEnabled(false);
}//GEN-LAST:event_cancelButtonActionPerformed

private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
// Add your handling code here:
}//GEN-LAST:event_uploadButtonActionPerformed

private void EvaluateNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluateNewItemActionPerformed
// Add your handling code here:
}//GEN-LAST:event_EvaluateNewItemActionPerformed

// Changes the title bar, depending on if the library has been saved as anything yet.
private void updateBanner() {
    String bannerText;

    if (saveFile == null) {  // If there is no saved library yet, show this text...
        bannerText = "JImage Mosaic Maintain Library [Untitled]";
    } else {                // Otherwise, show this text.
        bannerText = "JImage Mosaic Maintain Library [" + saveFile + "]";
    }

    this.setTitle(bannerText);  // Do it.
}

// User wants to open an existing image library.
private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
    final JFileChooser fileChoose = new JFileChooser();   // set up a file choosing dialog...
    fileChoose.setFileFilter(new myLibraryFilter());      // Filtering out all but JImage Mosaic libraries (*.jml)
    int returnVal = fileChoose.showOpenDialog(libForm.this);
   if (returnVal==0) {  // If they actually selected a library...
    String openFile = fileChoose.getSelectedFile().getPath();
    try {
        FileInputStream fis = new FileInputStream(openFile);  // Open the library.
        ObjectInputStream ois = new ObjectInputStream(fis);
        int numObjects = ois.readInt();  // The first number in the file is the length.

        try {
        for (int count = 0; count < numObjects; count++) {  // Read in all of the tiles in the library,
            imageInfo img = (imageInfo) ois.readObject();
            libFileList.add(img.getFileName());
            imageFileList.put(img);  // And put them in the list.
        }
        } catch (ClassNotFoundException cnfe) {}

        ois.close();
        fis.close();
        updateBanner();
    } catch (IOException ioe) {}
   }
}//GEN-LAST:event_openButtonActionPerformed

// The user wants to save this current library to a file.
private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    int returnVal = 0;
    if (saveFile == null) {  // If they haven't already saved...
        final JFileChooser fileChoose = new JFileChooser();  // Give them a file chooser.
        fileChoose.setFileFilter(new myLibraryFilter());
        returnVal = fileChoose.showSaveDialog(libForm.this);
        if (returnVal == 0) {  // If they didn't hit "Cancel"...
            saveFile = fileChoose.getSelectedFile().getPath();
        }
    }

  if (returnVal == 0) {
    try {
        FileOutputStream fos = new FileOutputStream(saveFile);  // Open the file to save.
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeInt(imageFileList.getSize());  // First, write the length of the list.
        for (int c = 0; c < imageFileList.getSize(); c++) {  // Next, cycle through each tile,
            oos.writeObject(imageFileList.get(c));           // And write its object to the file.
        }

        oos.close();
        fos.close();
        updateBanner();
    } catch (IOException ioe) {}
  }
}//GEN-LAST:event_saveButtonActionPerformed

// The timer.  This controls the updating of the progress indicator.
private void timerOnTime(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerOnTime
            // Update the progress indicator with the latest location and output message.
            evaluationProgressBar.setValue(currentEval.getCurr());
            evaluationProgressBar.setString(currentEval.getMessage() + "  [" +  (int)(evaluationProgressBar.getPercentComplete() * 100) + "%]");
            if (currentEval.done()) {  // If we are at the end of the evaluation task...
                removeAllFilesButton.setEnabled(true);  // Show it..
                evaluationProgressBar.setString("Done!  [100%]");
                saveButton.setEnabled(true);
                timer.stop();  // and stop the timer.
            }

}//GEN-LAST:event_timerOnTime

// This is purely debugging right now.  It just prints out the list.
// In the future, this will be to evaluate new images.
private void EvaluateChangedItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluateChangedItemActionPerformed
    imageFileList.printList();  // Print out the list.
}//GEN-LAST:event_EvaluateChangedItemActionPerformed

// The user wants to pause the evaluation process.  (I'm not sure this really works.)
private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
    // if they are hitting "Pause"...
    if (pauseButton.getText() == "Pause") {
        try {
            currentEval.wait();  // Tell the process to wait.
        } catch (InterruptedException ie) {
            System.out.println("Thread Error!");
        }
        pauseButton.setText("Resume");  // Set the button to "Resume".
    } else if (pauseButton.getText() == "Resume") {  // If they ARE resuming...
        currentEval.notify();      // Notify the task to start back up.
        pauseButton.setText("Pause");  // And put the button back the way it was.
    }
}//GEN-LAST:event_pauseButtonActionPerformed

// The user wants to clear the list.
private void removeAllFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllFilesButtonActionPerformed
    libFileList.removeAll();  // Remove all the images from the internal list.
    imageFileList.clear();    // Clear the GUI list.
}//GEN-LAST:event_removeAllFilesButtonActionPerformed

// The user wants to remove some files from the list.
private void removeOneFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOneFileButtonActionPerformed
    int[] fileIndexes;
    fileIndexes = libFileList.getSelectedIndexes();  // Figure out which files they want to get rid of.
    for (int count=fileIndexes.length-1; count >= 0; count--)
    {
        imageFileList.remove(fileIndexes[count]);  // Take them out of the internal list.
        libFileList.delItem(fileIndexes[count]);   // Erase them from the GUI list.
    }
}//GEN-LAST:event_removeOneFileButtonActionPerformed

// The user wants to add some files to the list.
private void addOneFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOneFileButtonActionPerformed
    File[] fileNames;
    fileNames = availFileList.getSelectedFiles();  // Figure out which files to add.
    for (int count=0; count < availFileList.getSelectedFiles().length; count++)
    {
        imageInfo imageFileRec = new imageInfo();       // Add the file to the list.
        imageFileRec.setFileName(fileNames[count].toString());
        if (imageFileList.get(fileNames[count].toString()) == null) {
            libFileList.add(fileNames[count].toString());
            imageFileList.put(imageFileRec);
        }
    }
}//GEN-LAST:event_addOneFileButtonActionPerformed

// The user wants to leave.
private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.hide();  // Get rid of this form.
}//GEN-LAST:event_exitButtonActionPerformed

// The user wants to evaluate the images in the list.
private void EvaluateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluateMenuItemActionPerformed
    
    saveButton.setEnabled(false);
    cancelButton.setEnabled(true);
    removeAllFilesButton.setEnabled(false);  // Make it so they can't remove the files during evalution.
    currentEval = new medianEvaluator(imageFileList);  // Get a median evaluator algorithm.
    evaluationProgressBar.setValue(0); // Progress indicator setup.
    evaluationProgressBar.setMaximum(currentEval.getTaskLen());
    evaluationProgressBar.setStringPainted(true);

    currentEval.go();  // Start the task and timer.
    timer.start();
}//GEN-LAST:event_EvaluateMenuItemActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.hide();  // Get rid of this form.
    }//GEN-LAST:event_exitForm

// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JMenuBar jMenuBar1;
private javax.swing.JMenu FileMenu;
private javax.swing.JMenuItem saveButton;
private javax.swing.JMenuItem saveAsButton;
private javax.swing.JMenuItem openButton;
private javax.swing.JSeparator jSeparator2;
private javax.swing.JMenuItem commitButton;
private javax.swing.JMenuItem openDatabaseButton;
private javax.swing.JSeparator jSeparator3;
private javax.swing.JMenuItem uploadButton;
private javax.swing.JMenuItem downloadButton;
private javax.swing.JSeparator jSeparator4;
private javax.swing.JMenuItem exitButton;
private javax.swing.JMenu EvaluateMenu;
private javax.swing.JMenuItem EvaluateMenuItem;
private javax.swing.JMenuItem EvaluateNewItem;
private javax.swing.JMenuItem EvaluateChangedItem;
private org.netbeans.examples.lib.timerbean.Timer timer;
private javax.swing.JProgressBar evaluationProgressBar;
private javax.swing.JComboBox algorithmBox;
private javax.swing.JButton pauseButton;
private javax.swing.JPanel jPanel1;
private java.awt.List libFileList;
private javax.swing.JFileChooser availFileList;
private javax.swing.JButton addOneFileButton;
private javax.swing.JButton removeOneFileButton;
private javax.swing.JButton removeAllFilesButton;
private javax.swing.JPanel jPanel2;
private javax.swing.JButton cancelButton;
private javax.swing.JLabel jLabel1;
private javax.swing.JButton algOptionsButton;
// End of variables declaration//GEN-END:variables

// Class variables.
private imageUtils.imageList imageFileList;  // The list of images.
private String saveFile;                     // The filename to save to.
private medianEvaluator currentEval;         // The evaluation algorithm.  Will be replaced with user-selectable algorithms.
//private scalarEvaluator currentEval;
}
