/************************************************
 *  MainForm.java
 *  Author: Jim Drewes, 2002
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *
 * This is the actual main form for the program.
 * It should be mostly GUI stuff, and calling other
 * methods.  Right now, there is some prototype code
 * in this class, however.
 ************************************************/

import java.io.FileInputStream;
import java.io.ObjectInputStream;
import imageUtils.*;
import java.awt.image.RenderedImage;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import javax.swing.JPopupMenu;
import javax.swing.JComboBox;
import java.awt.Color;
import javax.media.jai.widget.ScrollingImagePanel;
import javax.media.jai.TiledImage;
import plugins.saveTypes.*;
import plugins.*;

public class MainForm extends javax.swing.JFrame {

	// Constants to represent the locations of the Tabs.
	private final int IMAGE_TAB_LOC = 0;
	private final int MAP_TAB_LOC = 1;
	private final int FINAL_TAB_LOC = 2;

	/** Creates new form MainForm */
	public MainForm() {
		JPopupMenu.setDefaultLightWeightPopupEnabled(false); // This is so the
																// menu appears
																// over the
																// images in
																// tabs.
		initComponents(); // Initialize GUI components.
		timer1.stop(); // Make sure the timer isn't ticking away.
		JFrame imageFrame = new JFrame(); // Create the frames for the Tabbed
											// panel.
		JFrame mapFrame = new JFrame();
		images = new imageList(); // The list of images in the library.
		showCalculatedInfo(); // Initialize the text in the Mosaic Info box.
		setupAlgorithmBox(); // Populate the render algorithm combo-box.
		optionBox = new standardOptionBox();
	}

	// The following section was created by Forte.
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		jMenuBar1 = new javax.swing.JMenuBar();
		projectMenu = new javax.swing.JMenu();
		loadButton = new javax.swing.JMenuItem();
		maintainLibButton = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JSeparator();
		exitButton = new javax.swing.JMenuItem();
		renderMenu = new javax.swing.JMenu();
		renderButton = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JSeparator();
		saveImageButton = new javax.swing.JMenuItem();
		timer1 = new org.netbeans.examples.lib.timerbean.Timer();
		timer1.stop();
		baseImageButton = new javax.swing.JButton();
		infoPane = new javax.swing.JPanel();
		baseImageLabel = new javax.swing.JLabel();
		baseImageDims = new javax.swing.JLabel();
		finalDimText = new javax.swing.JLabel();
		numImagesText = new javax.swing.JLabel();
		infoTitleLabel = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		hTilesBox = new javax.swing.JTextField();
		vTilesBox = new javax.swing.JTextField();
		loadLibButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jTabbedPane2 = new javax.swing.JTabbedPane();
		tileWidthBox = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		tileHeightBox = new javax.swing.JTextField();
		jCheckBox1 = new javax.swing.JCheckBox();
		generateMapButton = new javax.swing.JButton();
		formProgressBar = new javax.swing.JProgressBar();
		renderFormButton = new javax.swing.JButton();
		stopButton = new javax.swing.JButton();
		renderOptionsButton = new javax.swing.JButton();
		renderSelectBox = new javax.swing.JComboBox();
		jLabel3 = new javax.swing.JLabel();

		projectMenu.setText("Project");
		loadButton.setText("Load");
		loadButton.setEnabled(false);
		loadButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadButtonActionPerformed(evt);
			}
		});

		projectMenu.add(loadButton);
		maintainLibButton.setText("Maintain Image Library");
		maintainLibButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						maintainLibButtonActionPerformed(evt);
					}
				});

		projectMenu.add(maintainLibButton);
		projectMenu.add(jSeparator1);
		exitButton.setText("Exit");
		exitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitButtonActionPerformed(evt);
			}
		});

		projectMenu.add(exitButton);
		jMenuBar1.add(projectMenu);
		renderMenu.setText("Render");
		renderMenu.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				renderMenuActionPerformed(evt);
			}
		});

		renderButton.setText("Render");
		renderButton.setEnabled(false);
		renderButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				renderButtonActionPerformed(evt);
			}
		});

		renderMenu.add(renderButton);
		renderMenu.add(jSeparator2);
		saveImageButton.setText("Save Output Image");
		saveImageButton.setEnabled(false);
		saveImageButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveImageButtonActionPerformed(evt);
			}
		});

		renderMenu.add(saveImageButton);
		jMenuBar1.add(renderMenu);
		timer1.setDelay(5L);
		timer1.addTimerListener(new org.netbeans.examples.lib.timerbean.TimerListener() {
			public void onTime(java.awt.event.ActionEvent evt) {
				timer1OnTime(evt);
			}
		});

		getContentPane().setLayout(
				new org.netbeans.lib.awtextra.AbsoluteLayout());

		setTitle("JImage Mosaic [Untitled]");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});

		baseImageButton.setText("Load Base Image");
		baseImageButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				baseImageButtonActionPerformed(evt);
			}
		});

		getContentPane().add(
				baseImageButton,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 160,
						-1));

		infoPane.setLayout(new java.awt.GridLayout(6, 2));

		infoPane.setBorder(new javax.swing.border.EtchedBorder());
		baseImageLabel.setText("  Base Image Name:");
		infoPane.add(baseImageLabel);

		baseImageDims.setText("  Base Image Dimensions:");
		infoPane.add(baseImageDims);

		finalDimText.setText("  Final Image Dimensions:");
		infoPane.add(finalDimText);

		numImagesText.setText("  Images in Library:");
		infoPane.add(numImagesText);

		getContentPane().add(
				infoPane,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 350,
						200));

		infoTitleLabel.setText("Mosaic Info");
		getContentPane().add(
				infoTitleLabel,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 220,
						20));

		jLabel5.setText("Horizontal Tiles:");
		getContentPane().add(
				jLabel5,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 270, -1,
						-1));

		jLabel6.setText("Vertical Tiles:");
		getContentPane().add(
				jLabel6,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 270, -1,
						-1));

		hTilesBox.setText("20");
		hTilesBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				hTilesBoxActionPerformed(evt);
			}
		});

		hTilesBox.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				hTilesBoxFocusLost(evt);
			}
		});

		getContentPane().add(
				hTilesBox,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 270, 50,
						-1));

		vTilesBox.setText("20");
		vTilesBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				vTilesBoxActionPerformed(evt);
			}
		});

		vTilesBox.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				vTilesBoxFocusLost(evt);
			}
		});

		getContentPane().add(
				vTilesBox,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, 50,
						-1));

		loadLibButton.setText("Load Image Library");
		loadLibButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadLibButtonActionPerformed(evt);
			}
		});

		getContentPane().add(
				loadLibButton,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 500,
						160, -1));

		jLabel1.setText("Tile Width (px): ");
		getContentPane().add(
				jLabel1,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 300, -1,
						-1));

		getContentPane().add(
				jTabbedPane2,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 330,
						480));

		tileWidthBox.setText("100");
		tileWidthBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tileWidthBoxActionPerformed(evt);
			}
		});

		tileWidthBox.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				tileWidthBoxFocusLost(evt);
			}
		});

		getContentPane().add(
				tileWidthBox,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 50,
						-1));

		jLabel2.setText("Tile Height (px):");
		getContentPane().add(
				jLabel2,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 300, -1,
						-1));

		tileHeightBox.setText("100");
		tileHeightBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tileHeightBoxActionPerformed(evt);
			}
		});

		tileHeightBox.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				tileHeightBoxFocusLost(evt);
			}
		});

		getContentPane().add(
				tileHeightBox,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 300, 50,
						-1));

		jCheckBox1.setText("Maintain Aspect Ratio");
		jCheckBox1.setEnabled(false);
		getContentPane().add(
				jCheckBox1,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, -1,
						-1));

		generateMapButton.setText("Generate Map");
		generateMapButton.setEnabled(false);
		generateMapButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						generateMapButtonActionPerformed(evt);
					}
				});

		getContentPane().add(
				generateMapButton,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 330,
						160, -1));

		getContentPane().add(
				formProgressBar,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 504,
						360, 20));

		renderFormButton.setText("Render");
		renderFormButton.setEnabled(false);
		renderFormButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				renderFormButtonActionPerformed(evt);
			}
		});

		getContentPane().add(
				renderFormButton,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 480, 80,
						20));

		stopButton.setText("Stop");
		stopButton.setEnabled(false);
		stopButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				stopButtonActionPerformed(evt);
			}
		});

		getContentPane().add(
				stopButton,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 480, 70,
						20));

		renderOptionsButton.setText("Render Options");
		renderOptionsButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						renderOptionsButtonActionPerformed(evt);
					}
				});

		getContentPane().add(
				renderOptionsButton,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 460,
						150, 20));

		renderSelectBox.setMaximumRowCount(5);
		renderSelectBox.setRenderer(new myComboBoxRenderer());
		getContentPane().add(
				renderSelectBox,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 480,
						200, 20));

		jLabel3.setText("Rendering Algorithm");
		getContentPane().add(
				jLabel3,
				new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 460,
						200, -1));

		setJMenuBar(jMenuBar1);
		pack();
	}// GEN-END:initComponents

	private void setupAlgorithmBox() {
		renderSelectBox.addItem(new radiusRenderRandom());
		renderSelectBox.addItem(new radiusRender());
	}

	private void renderOptionsButtonActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_renderOptionsButtonActionPerformed
		optionBox.show();
	}// GEN-LAST:event_renderOptionsButtonActionPerformed

	// User wants to stop rendering.
	private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_stopButtonActionPerformed
		timer1.stop();
		if (progressAction == "render") {
			renderTask.stop(); // Stop the task and the timer.
		} else if (progressAction == "mapCreate") {
			mapTask.stop();
		}
		// Re-Enable appropriate controls.
		if ((images.getSize() > 0) && (mapImageTab != null)) {
			renderButton.setEnabled(true);
			renderFormButton.setEnabled(true);
		}

		stopButton.setEnabled(false);
		generateMapButton.setEnabled(true);
		hTilesBox.setEnabled(true);
		vTilesBox.setEnabled(true);
		tileWidthBox.setEnabled(true);
		tileHeightBox.setEnabled(true);
		baseImageButton.setEnabled(true);
		loadLibButton.setEnabled(true);

		formProgressBar.setValue(0); // Reset the progress bar.
		formProgressBar.setString("Stopped!");

	}// GEN-LAST:event_stopButtonActionPerformed

	// User wants to render a final image.
	private void renderFormButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_renderFormButtonActionPerformed
		doRenderAction();
	}// GEN-LAST:event_renderFormButtonActionPerformed
		// End Forte generated code.

	// The timer events. For every tick of the timer, update the progress bar.
	private void timer1OnTime(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_timer1OnTime
	// Depending on what task is being executed, the progress indicator will be
	// updated differently.
	// progressAction holds a string that tells what the task is.

		// If we are rendering an image...
		if (progressAction == "render") {
			// Get the current location in the task, and its output, and update
			// the progress bar accordingly.
			formProgressBar.setValue(renderTask.getCurr());
			formProgressBar
					.setString(renderTask.getMessage()
							+ "  ["
							+ (int) (formProgressBar.getPercentComplete() * 100)
							+ "%]");
			if (renderTask.done()) { // If we are at the end of the task...
				formProgressBar.setString("Rendering Done!  [100%]"); // Show
																		// it.
				// Put the final image into a new scrollable tab in the tabbed
				// panel.
				jTabbedPane2.add("Final",
						new ScrollingImagePanel(renderTask.getNewImage(),
								renderTask.getNewImage().getWidth(), renderTask
										.getNewImage().getHeight()));
				infoBox ib = new infoBox(MainForm.this, true,
						"Done Rendering!", "Done!"); // Display a success
														// message.
				ib.show();
				saveImageButton.setEnabled(true); // Allow the image to be
													// saved.
				renderButton.setEnabled(true); // Enable/Disable appropriate
												// controls.
				renderFormButton.setEnabled(true);
				stopButton.setEnabled(false);
				generateMapButton.setEnabled(true);
				hTilesBox.setEnabled(true);
				vTilesBox.setEnabled(true);
				tileWidthBox.setEnabled(true);
				tileHeightBox.setEnabled(true);
				baseImageButton.setEnabled(true);
				loadLibButton.setEnabled(true);
				timer1.stop(); // Stop the timer.
			}
		} else if (progressAction == "fileload") { // Put file loading task
													// stuff here.
		} else if (progressAction == "filesave") { // Put file saving task stuff
													// here.
		} else if (progressAction == "mapCreate") { // If we are generating a
													// map...
			// Get the current location in the task, and its output, and update
			// the progress bar accordingly.
			formProgressBar.setValue(mapTask.getCurr());
			formProgressBar
					.setString(mapTask.getMessage()
							+ "  ["
							+ (int) (formProgressBar.getPercentComplete() * 100)
							+ "%]");
			if (mapTask.done()) { // If we are at the end of the task...
				formProgressBar.setString("Map Creation Done!  [100%]");
				if ((mapImageTab == null) && (mapTask.getOutImage() != null)) { // If
																				// there
																				// isn't
																				// already
																				// a
																				// map
																				// displayed,
																				// display
																				// one.
					mapImageTab = new ScrollingImagePanel(
							mapTask.getOutImage(), mapTask.getOutImage()
									.getWidth(), mapTask.getOutImage()
									.getHeight());
					jTabbedPane2.add("Map", mapImageTab);
				} else if (mapTask.getOutImage() != null) { // Otherwise,
															// replace the old
															// map tab with the
															// new one.
					mapImageTab = new ScrollingImagePanel(
							mapTask.getOutImage(), mapTask.getOutImage()
									.getWidth(), mapTask.getOutImage()
									.getHeight());
					jTabbedPane2.setComponentAt(MAP_TAB_LOC, mapImageTab);
				}
				mapArray = mapTask.getMapArray(); // Hold on to the array of
													// colors that was
													// generated.
				generateMapButton.setEnabled(true);
				if ((images.getSize() > 0) && (mapImageTab != null)) {
					renderButton.setEnabled(true);
					renderFormButton.setEnabled(true);
				}
				baseImageButton.setEnabled(true);
				tileWidthBox.setEnabled(true);
				tileHeightBox.setEnabled(true);
				vTilesBox.setEnabled(true);
				hTilesBox.setEnabled(true);
				stopButton.setEnabled(false);
				timer1.stop(); // Stop the timer.
			}
		} else { // Load image library task stuff.
		}
	}// GEN-LAST:event_timer1OnTime

	private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitButtonActionPerformed
		System.exit(0); // End the program.
	}// GEN-LAST:event_exitButtonActionPerformed

	// The user wants to save an image.
	private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveImageButtonActionPerformed
		final JFileChooser fileChoose = new JFileChooser(); // Set up and show a
															// file chooser
															// dialog...
		fileChoose.setFileFilter(new myBMPFilter()); // Filtering to show only
														// bitmaps (for now).
		int returnVal = fileChoose.showSaveDialog(MainForm.this);
		if (returnVal == 0) { // If they actually selected a file,
			String saveFile = fileChoose.getSelectedFile().getPath(); // get the
																		// filename/path.
			BMPSaveType bst = new BMPSaveType(renderTask.getNewImage(),
					saveFile);
			if (bst.saveImageToFile() == false) { // Save the image to a file.
				System.out.println("Error saving to file."); // Debugging.
			} else { // Display a success dialog box.
				infoBox ib = new infoBox(MainForm.this, true, "Image Saved as "
						+ fileChoose.getSelectedFile().toString(), "Saved");
				ib.show();
			}
		}
	}// GEN-LAST:event_saveImageButtonActionPerformed

	// The user wants to render an image.
	private void doRenderAction() {
		// Show/hide requisite buttons.
		generateMapButton.setEnabled(false);
		renderButton.setEnabled(false);
		renderFormButton.setEnabled(false);
		stopButton.setEnabled(true);
		baseImageButton.setEnabled(false);
		loadLibButton.setEnabled(false);
		tileWidthBox.setEnabled(false);
		tileHeightBox.setEnabled(false);
		vTilesBox.setEnabled(false);
		hTilesBox.setEnabled(false);
		progressAction = "render"; // Set the progressAction (for the
									// timer/progress indicator.)
		timer1.stop(); // Make sure the timer isn't running from other tasks.
		// Set up a new render task. In the future, this will be
		// user-selectable.
		renderTask = new radiusRenderRandom(mapArray, images, baseImage,
				hTiles, vTiles, tileWidth, tileHeight,
				optionBox.getColorCorrectPercent(), optionBox.getTileRep(),
				optionBox.getMinDistNum(), optionBox.getTileOrder());
		formProgressBar.setValue(0); // Set up the progress bar.
		formProgressBar.setMaximum(renderTask.getTaskLen());
		formProgressBar.setStringPainted(true);

		renderTask.go(); // Start the task.
		timer1.start();
	}

	// The user wants to render an image.
	private void renderButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_renderButtonActionPerformed
		doRenderAction();
	}// GEN-LAST:event_renderButtonActionPerformed

	private void renderMenuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_renderMenuActionPerformed

	}// GEN-LAST:event_renderMenuActionPerformed

	// User wants to create a map.
	private void generateMapButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_generateMapButtonActionPerformed
		progressAction = "mapCreate"; // Set the progressAction (for the
										// timer/progress indicator).

		mapTask = new defaultMapCreate(baseImage, hTiles, vTiles); // Create a
																	// new map
																	// task.
																	// This WILL
																	// be
																	// user-selectable.
		formProgressBar.setValue(0); // Set up the progress indicator.
		formProgressBar.setMaximum(mapTask.getTaskLen());
		formProgressBar.setStringPainted(true);

		baseImageButton.setEnabled(false); // Disable appropriate controls.
		generateMapButton.setEnabled(false);
		tileWidthBox.setEnabled(false);
		tileHeightBox.setEnabled(false);
		vTilesBox.setEnabled(false);
		hTilesBox.setEnabled(false);
		stopButton.setEnabled(true);

		mapTask.go(); // Start the task and timer.
		timer1.start();

	}// GEN-LAST:event_generateMapButtonActionPerformed

	private void tileHeightBoxFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_tileHeightBoxFocusLost
		if (tileHeightBox.getText().length() == 0) {
			tileHeightBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_tileHeightBoxFocusLost

	private void tileWidthBoxFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_tileWidthBoxFocusLost
		if (tileWidthBox.getText().length() == 0) {
			tileWidthBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_tileWidthBoxFocusLost

	private void vTilesBoxFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_vTilesBoxFocusLost
		if (vTilesBox.getText().length() == 0) {
			vTilesBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_vTilesBoxFocusLost

	private void hTilesBoxFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_hTilesBoxFocusLost
		if (hTilesBox.getText().length() == 0) {
			hTilesBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_hTilesBoxFocusLost

	private void tileHeightBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tileHeightBoxActionPerformed
		if (tileHeightBox.getText().length() == 0) {
			tileHeightBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_tileHeightBoxActionPerformed

	private void tileWidthBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tileWidthBoxActionPerformed
		if (tileWidthBox.getText().length() == 0) {
			tileWidthBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_tileWidthBoxActionPerformed

	private void vTilesBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_vTilesBoxActionPerformed
		if (vTilesBox.getText().length() == 0) {
			vTilesBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_vTilesBoxActionPerformed

	private void hTilesBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_hTilesBoxActionPerformed
		if (hTilesBox.getText().length() == 0) {
			hTilesBox.setText("1");
		}
		showCalculatedInfo(); // Update the Mosaic Info box.
	}// GEN-LAST:event_hTilesBoxActionPerformed

	// This is to calculate the data displayed in the Mosaic Info box, and
	// display it.
	private void showCalculatedInfo() {
		// Grab the data.
		this.hTiles = Integer.parseInt(hTilesBox.getText().toString());
		this.vTiles = Integer.parseInt(vTilesBox.getText().toString());
		this.tileWidth = Integer.parseInt(tileWidthBox.getText().toString());
		this.tileHeight = Integer.parseInt(tileHeightBox.getText().toString());

		// Make the calculations.
		this.finalWidth = hTiles * tileWidth;
		this.finalHeight = vTiles * tileHeight;

		// Show the data.
		finalDimText.setText("  Final Image Dimensions: " + finalWidth + " x "
				+ finalHeight);
	}

	// The user wants to load a new base image.
	private void baseImageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_baseImageButtonActionPerformed
		progressAction = "fileload"; // set the progressAction for the
										// timer/progress indicator (not
										// currently implemented.)
		final JFileChooser fileChoose = new JFileChooser(); // Set up and show a
															// file chooser
															// dialog,
		fileChoose.setFileFilter(new myImageFilter()); // Filtering out things
														// that aren't valid
														// images.
		int returnVal = fileChoose.showOpenDialog(MainForm.this);
		if (returnVal == 0) { // If the user actually selected a file....

			this.baseImage = imageLoader.getRenderedImage(fileChoose
					.getSelectedFile().getPath()); // Load the image.
			if (baseImageTab == null) { // If there is no previously loaded base
										// image, add this image to the tabbed
										// panel.
				baseImageTab = new ScrollingImagePanel(baseImage,
						baseImage.getWidth(), baseImage.getHeight());
				jTabbedPane2.addTab("Base Image", baseImageTab);
				generateMapButton.setEnabled(true); // Allow the user to
													// generate a map now.
			} else { // If there already is a base image loaded, replace the
						// current one...
				baseImageTab = new ScrollingImagePanel(baseImage,
						baseImage.getWidth(), baseImage.getHeight());
				jTabbedPane2.setComponentAt(IMAGE_TAB_LOC, baseImageTab);

				// And if they created a map for the old image, remove it.
				if (jTabbedPane2.getSelectedIndex() == MAP_TAB_LOC) {
					jTabbedPane2.setSelectedIndex(IMAGE_TAB_LOC);
				}

				if (mapImageTab != null) {
					jTabbedPane2.removeTabAt(MAP_TAB_LOC);
				}
				mapImageTab = null;
			}

			// Update the data in the Mosaic Info box.
			String imgNameText = fileChoose.getSelectedFile().getPath();
			imgNameText = imgNameText.substring(
					imgNameText.lastIndexOf(Utils.getSlashType()) + 1,
					imgNameText.length());
			baseImageLabel.setText("  Base Image Name: " + imgNameText);
			baseImageDims.setText("  Base Image Dimensions: "
					+ baseImage.getWidth() + " x " + baseImage.getHeight());
			generateMapButton.setEnabled(true); // Enable/Disable appropriate
												// controls.
			renderButton.setEnabled(false);
			renderFormButton.setEnabled(false);
		}
	}// GEN-LAST:event_baseImageButtonActionPerformed

	// The user wants to maintain their image library.
	private void maintainLibButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_maintainLibButtonActionPerformed
		libForm lf = new libForm(); // Show the libForm.
		lf.show();
	}// GEN-LAST:event_maintainLibButtonActionPerformed

	// The user wants to load a library of images.
	private void loadLibButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadLibButtonActionPerformed
		final JFileChooser fileChoose = new JFileChooser(); // Set up a file
															// chooser dialog,
		fileChoose.setFileFilter(new myLibraryFilter()); // Showing only JImage
															// Mosaic library
															// files (*.jml).
		int returnVal = fileChoose.showOpenDialog(MainForm.this);
		if (returnVal == 0) { // If they chose a library...
			try {
				// Open the library.
				FileInputStream fis = new FileInputStream(fileChoose
						.getSelectedFile().getPath());
				ObjectInputStream ois = new ObjectInputStream(fis);
				int numObjects = ois.readInt();

				// Read all of the tiles out of the library.
				try {
					for (int count = 0; count < numObjects; count++) {
						images.put((imageInfo) ois.readObject());
					}
				} catch (ClassNotFoundException cnfe) {
				}

				// Update the data in the Mosaic Info box.
				numImagesText.setText("  Images in Library: " + numObjects);
				if (mapImageTab != null) { // If they already made the map, let
											// them render.
					renderButton.setEnabled(true);
					renderFormButton.setEnabled(true);
				}
			} catch (java.io.IOException ioe) {
			}
		}
	}// GEN-LAST:event_loadLibButtonActionPerformed

	private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadButtonActionPerformed
	// This will load a project into the MainForm.
	}// GEN-LAST:event_loadButtonActionPerformed

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
		System.exit(0);
	}// GEN-LAST:event_exitForm

	// Start up the program here.
	public static void main(String args[]) {
		new MainForm().show();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenu projectMenu;
	private javax.swing.JMenuItem loadButton;
	private javax.swing.JMenuItem maintainLibButton;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JMenuItem exitButton;
	private javax.swing.JMenu renderMenu;
	private javax.swing.JMenuItem renderButton;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JMenuItem saveImageButton;
	private org.netbeans.examples.lib.timerbean.Timer timer1;
	private javax.swing.JButton baseImageButton;
	private javax.swing.JPanel infoPane;
	private javax.swing.JLabel baseImageLabel;
	private javax.swing.JLabel baseImageDims;
	private javax.swing.JLabel finalDimText;
	private javax.swing.JLabel numImagesText;
	private javax.swing.JLabel infoTitleLabel;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JTextField hTilesBox;
	private javax.swing.JTextField vTilesBox;
	private javax.swing.JButton loadLibButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JTabbedPane jTabbedPane2;
	private javax.swing.JTextField tileWidthBox;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JTextField tileHeightBox;
	private javax.swing.JCheckBox jCheckBox1;
	private javax.swing.JButton generateMapButton;
	private javax.swing.JProgressBar formProgressBar;
	private javax.swing.JButton renderFormButton;
	private javax.swing.JButton stopButton;
	private javax.swing.JButton renderOptionsButton;
	private javax.swing.JComboBox renderSelectBox;
	private javax.swing.JLabel jLabel3;
	// End of variables declaration//GEN-END:variables

	private imageList images; // The library of tiles.
	private JFrame imageFrame; // The base image tab.
	private JFrame mapFrame; // The map tab.
	private int vTiles; // Number of tiles in the final image, vertically.
	private int hTiles; // Number of tiles in the final image, horizontally.
	private int tileWidth; // The width of one tile in the final image.
	private int tileHeight; // The height of one tile in the final image.
	private int finalWidth; // The width of the final image.
	private int finalHeight; // The height of the final image.
	private RenderedImage baseImage; // The base image to use, as an image, not
										// a filename.
	private Color[][] mapArray = new Color[500][500]; // The array for the color
														// map.
	private TiledImage newImage; // The final generated image.
	private ScrollingImagePanel baseImageTab, mapImageTab; // Scrolling panels
															// for the image and
															// map tabs to go
															// into.
	private String progressAction = "render"; // Tells timer/progress indicator
												// what task is being performed.
	// These two will be replaced when a classloader is implemented, and the
	// user
	// can choose the algorithms for rendering and map creation.
	private radiusRenderRandom renderTask; // The rendering task/algorithm.
	// private compareRender renderTask; // The rendering task/algorithm.
	private defaultMapCreate mapTask; // The map creation task/algorithm.
	private standardOptionBox optionBox;
}
